Index: app/src/main/java/com/stolz/placessearch/details/DetailRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stolz.placessearch.details\n\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.util.Log\nimport com.stolz.placessearch.model.Place\nimport com.stolz.placessearch.model.places.Venue\nimport com.stolz.placessearch.network.FoursquareApiService\nimport com.stolz.placessearch.network.GoogleMapsApiService\nimport com.stolz.placessearch.util.SEATTLE_LATITUDE\nimport com.stolz.placessearch.util.SEATTLE_LONGITUDE\nimport com.stolz.placessearch.util.Utils\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport okhttp3.ResponseBody\nimport retrofit2.await\nimport java.io.BufferedInputStream\nimport javax.inject.Inject\n\nprivate val TAG = DetailRepository::class.java.simpleName\n\nclass DetailRepository @Inject constructor(\n    private val foursquareApiService: FoursquareApiService,\n    private val googleMapsApiService: GoogleMapsApiService\n) {\n\n    suspend fun fetchStaticMap(context: Context, place: Place): Bitmap? {\n        val centerMarkerString = Utils.generateStaticMarkerQueryParam(\n            SEATTLE_LATITUDE,\n            SEATTLE_LONGITUDE,\n            Utils.MarkerColor.RED\n        )\n        val placeMarkerString = Utils.generateStaticMarkerQueryParam(\n            place.location.latitude,\n            place.location.longitude,\n            Utils.MarkerColor.GREEN\n        )\n\n        return withContext(Dispatchers.IO) {\n            val staticMapDeferred =\n                googleMapsApiService.getStaticMap(\n                    centerMarker = centerMarkerString,\n                    placeMarker = placeMarkerString,\n                    zoom = Utils.generateZoomLevel(place.distanceToCenter),\n                    size = Utils.generateStaticMapDimensions(context.resources)\n                )\n            try {\n                val result = staticMapDeferred.await()\n                Log.v(TAG, \"Static map generated successfully\")\n                createBitmap(result)\n            } catch (t: Throwable) {\n                Log.e(TAG, \"Static map generation failed - ${t.message}\")\n                null\n            }\n        }\n    }\n\n    suspend fun fetchVenueInformation(venueId: String): Venue? {\n        return withContext(Dispatchers.IO) {\n            val venueInformationDeferred =\n                foursquareApiService.getVenueDetails(venueId = venueId)\n            try {\n                val venueDeferred = venueInformationDeferred.await()\n                Log.v(TAG, \"Got venue information successfully\")\n                venueDeferred.response.venue\n            } catch (t: Throwable) {\n                Log.e(TAG, \"Failed retrieving venue information - ${t.message}\")\n                null\n            }\n        }\n    }\n\n    private fun createBitmap(responseBody: ResponseBody): Bitmap {\n        val inputStream = responseBody.byteStream()\n        val bis = BufferedInputStream(inputStream)\n        return BitmapFactory.decodeStream(bis)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/stolz/placessearch/details/DetailRepository.kt	(revision c74c684dca43082f7e37008d14b404d6ab1636c2)
+++ app/src/main/java/com/stolz/placessearch/details/DetailRepository.kt	(date 1577035140000)
@@ -20,12 +20,12 @@
 
 private val TAG = DetailRepository::class.java.simpleName
 
-class DetailRepository @Inject constructor(
+open class DetailRepository @Inject constructor(
     private val foursquareApiService: FoursquareApiService,
     private val googleMapsApiService: GoogleMapsApiService
 ) {
 
-    suspend fun fetchStaticMap(context: Context, place: Place): Bitmap? {
+    open suspend fun fetchStaticMap(context: Context, place: Place): Bitmap? {
         val centerMarkerString = Utils.generateStaticMarkerQueryParam(
             SEATTLE_LATITUDE,
             SEATTLE_LONGITUDE,
@@ -56,7 +56,7 @@
         }
     }
 
-    suspend fun fetchVenueInformation(venueId: String): Venue? {
+   open suspend fun fetchVenueInformation(venueId: String): Venue? {
         return withContext(Dispatchers.IO) {
             val venueInformationDeferred =
                 foursquareApiService.getVenueDetails(venueId = venueId)
Index: app/src/test/java/com/stolz/placessearch/details/DetailViewModelTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/com/stolz/placessearch/details/DetailViewModelTest.kt	(date 1577036265000)
+++ app/src/test/java/com/stolz/placessearch/details/DetailViewModelTest.kt	(date 1577036265000)
@@ -0,0 +1,96 @@
+package com.stolz.placessearch.details
+
+import android.content.Context
+import android.graphics.Bitmap
+import androidx.arch.core.executor.testing.InstantTaskExecutorRule
+import com.google.android.gms.maps.model.LatLng
+import com.nhaarman.mockitokotlin2.doReturn
+import com.nhaarman.mockitokotlin2.mock
+import com.nhaarman.mockitokotlin2.stub
+import com.stolz.placessearch.database.PlaceDao
+import com.stolz.placessearch.model.Place
+import com.stolz.placessearch.model.places.Venue
+import junit.framework.Assert.assertEquals
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.newSingleThreadContext
+import kotlinx.coroutines.runBlocking
+import kotlinx.coroutines.test.setMain
+import org.junit.Before
+import org.junit.Rule
+import org.junit.Test
+import org.mockito.ArgumentMatchers.anyString
+import org.mockito.Mock
+import org.mockito.MockitoAnnotations
+
+
+class DetailViewModelTest {
+    @Rule
+    @JvmField
+    var instantTaskExecutorRule = InstantTaskExecutorRule()
+
+    @Mock
+    lateinit var mockContext: Context
+    @Mock
+    lateinit var mockFavoriteDatabase: PlaceDao
+
+
+    lateinit var mockDetailRepository: DetailRepository
+
+
+    lateinit var mockBitmap: Bitmap
+    lateinit var mockVenue: Venue
+
+    private lateinit var detailViewModel: DetailViewModel
+    private val mainThreadSurrogate = newSingleThreadContext("UI thread")
+
+    @Before
+    fun setUp() {
+        MockitoAnnotations.initMocks(this)
+
+        mockDetailRepository = mock()
+        mockBitmap = mock()
+        mockVenue = mock()
+
+        Dispatchers.setMain(mainThreadSurrogate)
+
+        detailViewModel = DetailViewModel(
+            mockContext,
+            mockFavoriteDatabase,
+            mockDetailRepository
+        )
+    }
+
+    @Test
+    fun test_getStaticMap() {
+        val testPlace = Place(id = "1", name = "testPlace", location = LatLng(1.0, 1.0))
+        runBlocking {
+            mockDetailRepository.stub {
+                onBlocking { fetchStaticMap(mockContext, testPlace) }.doReturn(mockBitmap)
+            }
+
+            detailViewModel.getStaticMap(testPlace)
+            assertEquals(mockBitmap, detailViewModel.staticMap.value)
+        }
+    }
+
+    @Test
+    fun test_getVenueInformation() {
+//        val testVenue = Venue(
+//            id = "1",
+//            name = "testVenue",
+//            location = Location(1.0, 1.0),
+//            categories = ArrayList(),
+//            contact = Contact(),
+//            url = "www.test.com"
+//        )
+        runBlocking {
+            mockDetailRepository.stub {
+                onBlocking { fetchVenueInformation(anyString()) }.doReturn(mockVenue)
+            }
+
+            detailViewModel.getVenueInformation("abc123")
+            assertEquals(mockVenue, detailViewModel.staticMap.value)
+        }
+    }
+
+}
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-kapt'\n\napply plugin: 'kotlin-android-extensions'\n\napply plugin: \"androidx.navigation.safeargs.kotlin\"\n\ndef apikeyPropertiesFile = rootProject.file(\"apikey.properties\")\ndef apikeyProperties = new Properties()\napikeyProperties.load(new FileInputStream(apikeyPropertiesFile))\n\nandroid {\n    compileSdkVersion 28\n    dataBinding { enabled = true }\n    defaultConfig {\n        applicationId \"com.stolz.placessearch\"\n        minSdkVersion 23\n        targetSdkVersion 28\n        versionCode 1\n        versionName \"1.0\"\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n\n        buildConfigField(\"String\", \"FOURSQUARE_CLIENT_ID\", apikeyProperties['FOURSQUARE_CLIENT_ID'])\n        buildConfigField(\"String\", \"FOURSQUARE_CLIENT_SECRET\", apikeyProperties['FOURSQUARE_CLIENT_SECRET'])\n        buildConfigField(\"String\", \"GOOGLE_MAPS_API_KEY\", apikeyProperties['GOOGLE_MAPS_API_KEY'])\n    }\n\n    kapt {\n        generateStubs = true\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n\n    // Kotlin\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1\"\n    implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1\"\n\n    // Android\n    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\n    implementation \"androidx.recyclerview:recyclerview:1.1.0\"\n    implementation \"android.arch.lifecycle:extensions:1.1.1\"\n    kapt \"android.arch.lifecycle:compiler:1.1.1\"\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\n\n    // Core\n    implementation \"androidx.core:core:1.1.0\"\n\n    implementation 'androidx.appcompat:appcompat:1.1.0'\n    implementation 'androidx.core:core-ktx:1.1.0'\n\n    // Material Design\n    implementation 'com.google.android.material:material:1.0.0'\n\n    // Navigation\n    implementation \"androidx.navigation:navigation-fragment-ktx:2.1.0\"\n    implementation \"androidx.navigation:navigation-ui-ktx:2.1.0\"\n\n    // Room\n    implementation \"android.arch.persistence.room:runtime:1.1.1\"\n    kapt \"android.arch.persistence.room:compiler:1.1.1\"\n\n    // Retrofit\n    implementation \"com.squareup.retrofit2:retrofit:2.7.0\"\n    implementation \"com.squareup.retrofit2:converter-scalars:2.7.0\"\n    implementation \"com.squareup.retrofit2:converter-moshi:2.7.0\"\n    implementation \"com.squareup.okhttp3:okhttp:4.2.2\"\n    implementation \"com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2\"\n\n    // Moshi\n    implementation \"com.squareup.moshi:moshi:1.8.0\"\n    implementation \"com.squareup.moshi:moshi-kotlin:1.8.0\"\n\n    // Glide\n    implementation \"com.github.bumptech.glide:glide:4.8.0\"\n\n    // Google Maps\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\n\n    // Dagger\n    implementation 'com.google.dagger:dagger-android:2.16'\n    implementation 'com.google.dagger:dagger-android-support:2.16'\n    kapt 'com.google.dagger:dagger-android-processor:2.16'\n    kapt 'com.google.dagger:dagger-compiler:2.16'\n\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n    testImplementation \"com.squareup.retrofit2:retrofit:2.7.0\"\n    testImplementation \"com.squareup.retrofit2:converter-moshi:2.7.0\"\n    testImplementation \"com.squareup.retrofit2:converter-scalars:2.7.0\"\n    testImplementation \"com.squareup.retrofit2:retrofit-mock:2.7.0\"\n    testImplementation 'org.mockito:mockito-core:2.8.9'\n    testImplementation \"org.mockito:mockito-inline:2.8.9\"\n    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision c74c684dca43082f7e37008d14b404d6ab1636c2)
+++ app/build.gradle	(date 1577036185000)
@@ -43,6 +43,10 @@
         sourceCompatibility JavaVersion.VERSION_1_8
         targetCompatibility JavaVersion.VERSION_1_8
     }
+
+    testOptions {
+        unitTests.returnDefaultValues = true
+    }
 }
 
 dependencies {
@@ -108,7 +112,10 @@
     testImplementation "com.squareup.retrofit2:converter-moshi:2.7.0"
     testImplementation "com.squareup.retrofit2:converter-scalars:2.7.0"
     testImplementation "com.squareup.retrofit2:retrofit-mock:2.7.0"
-    testImplementation 'org.mockito:mockito-core:2.8.9'
-    testImplementation "org.mockito:mockito-inline:2.8.9"
+    testImplementation 'org.mockito:mockito-core:2.23.0'
+    testImplementation "org.mockito:mockito-inline:2.23.0"
+    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
     testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'
+    testImplementation 'android.arch.core:core-testing:1.1.1'
+
 }
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.3.50'\n    repositories {\n        google()\n        jcenter()\n        \n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.5.3'\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        classpath \"androidx.navigation:navigation-safe-args-gradle-plugin:2.1.0\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        \n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision c74c684dca43082f7e37008d14b404d6ab1636c2)
+++ build.gradle	(date 1577035140000)
@@ -11,9 +11,6 @@
         classpath 'com.android.tools.build:gradle:3.5.3'
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
         classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.1.0"
-
-        // NOTE: Do not place your application dependencies here; they belong
-        // in the individual module build.gradle files
     }
 }
 
